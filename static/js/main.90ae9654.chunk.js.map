{"version":3,"sources":["menu.svg","ListView.js","NeighborhoodMap.js","App.js","registerServiceWorker.js","index.js"],"names":["ListView","state","query","isHidden","this","props","markers","onToggleInfoWindow","onFilterLocations","className","type","src","menu","alt","onClick","setState","tabIndex","onSubmit","e","placeholder","onChange","target","value","filter","marker","isVisible","map","showInfo","title","id","Component","Map","withGoogleMap","defaultCenter","lat","lng","defaultZoom","position","animation","visible","onCloseClick","url","href","image","reviews","review","Fragment","rating","text","window","gm_authFailure","alert","NeighborhoodMap","loadingElement","containerElement","mapElement","role","aria-label","proxy","api","App","JSON","parse","stringify","markerData","willLoad","getBusiness","$","ajax","headers","Authorization","getReviews","toggleInfoWindow","m","google","maps","Animation","BOUNCE","filterLocations","event","preventDefault","DROP","toLowerCase","includes","isScriptLoaded","isScriptLoadSucceed","document","addEventListener","keyCode","done","data","businesses","image_url","push","fail","xhr","textStatus","error","console","querySelectorAll","slice","length","element","scriptLoader","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","render","getElementById","URL","process","origin","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.90ae9654.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/menu.8246383d.svg\";","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport menu from './menu.svg';\r\n\r\nclass ListView extends Component {\r\n\t// Ensure props are the right variable type\r\n\tstatic propTypes = {\r\n\t\tmarkers: PropTypes.array.isRequired,\r\n\t\tonToggleInfoWindow: PropTypes.func.isRequired,\r\n\t\tonFilterLocations: PropTypes.func.isRequired\r\n\t};\r\n\r\n\tstate = {\r\n\t\t// Search query\r\n\t\tquery: '',\r\n\t\t// Is list view hidden?\r\n\t\tisHidden: true\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {markers, onToggleInfoWindow, onFilterLocations} = this.props;\r\n\t\tconst {query, isHidden} = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={isHidden ? 'list-view hidden' : 'list-view'}>\r\n        <div className=\"list-side\">\r\n          <input className=\"list-toggle\" type=\"image\" src={menu}\r\n          \talt={isHidden ? 'Show list view' : 'Hide list view'}\r\n          \tonClick={() => this.setState({isHidden: !isHidden})}/>\r\n        </div>\r\n        <div className={isHidden ? \"list-main hidden\" : \"list-main\"}>\r\n          <h1 className=\"list-title\" tabIndex={0}>Neighborhood Map</h1>\r\n          <form className=\"list-form\" onSubmit={e => onFilterLocations(e, query)}>\r\n            <input className=\"list-search\" type=\"text\" placeholder=\"Search location\"\r\n              onChange={e => this.setState({query: e.target.value})}/>\r\n            <input className=\"list-submit\" type=\"submit\" value=\"Search\"/>\r\n          </form>\r\n          <ul className=\"list-locations\">\r\n            {markers.filter(marker => marker.isVisible).map(marker => (\r\n              <li key={marker.id}>\r\n                <button className={marker.showInfo ? 'list-button selected' : 'list-button'} type=\"button\"\r\n                  onClick={() => onToggleInfoWindow(marker)}>{marker.title}</button>\r\n                <hr/>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n\t}\r\n}\r\n\r\nexport default ListView;\r\n","import React, {Component} from 'react';\r\nimport {withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Create Map component at the very top to render the entire map once\r\nconst Map = withGoogleMap(props => (\r\n  <GoogleMap defaultCenter={{lat: 40.73971790095217, lng: -74.01005037971146}} defaultZoom={13}>\r\n    {props.markers.map(marker => (\r\n      <Marker key={marker.id} title={marker.title} position={marker.position}\r\n        animation={marker.animation} visible={marker.isVisible}\r\n        onClick={() => props.onToggleInfoWindow(marker)}>\r\n        {marker.showInfo && <InfoWindow onCloseClick={() => props.onToggleInfoWindow(marker)}>\r\n          {marker.url ? (\r\n            <div key={marker.id} className=\"marker-window\">\r\n              <a className=\"marker-url\" href={marker.url}>{marker.title}</a>\r\n              <img className=\"marker-image\" src={marker.image} alt={marker.title} tabIndex={0}/>\r\n              <a className=\"marker-yelp\" href=\"https://www.yelp.com\">Yelp Reviews</a>\r\n              {marker.reviews ? (\r\n                marker.reviews.map(review => (\r\n                  // An alternative to creating another div child\r\n                  <React.Fragment key={review.id}>\r\n                    <h3 className=\"marker-rating\" tabIndex={0}>Rating: {review.rating}</h3>\r\n                    <p className=\"marker-review\" tabIndex={0}>{review.text}</p>\r\n                  </React.Fragment>\r\n                ))\r\n              ) : (\r\n                <h3 className=\"error-message\" tabIndex={0}>Error! Yelp reviews were unable to load.</h3>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <h3 className=\"error-message\" tabIndex={0}>\r\n              Error! Yelp could not find the location selected.\r\n            </h3>\r\n          )}\r\n        </InfoWindow>}\r\n      </Marker>\r\n    ))}\r\n  </GoogleMap>\r\n));\r\n\r\n// Alert when Google Maps authentication fails\r\nwindow.gm_authFailure = () => {\r\n  alert('Google Maps authentication failed.');\r\n};\r\n\r\nclass NeighborhoodMap extends Component {\r\n\t// Ensure props are the right variable type\r\n\tstatic propTypes = {\r\n\t\tmarkers: PropTypes.array.isRequired,\r\n\t\tonToggleInfoWindow: PropTypes.func.isRequired\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {markers, onToggleInfoWindow} = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<Map loadingElement={<div className=\"map-loading\"/>}\r\n\t\t\t\tcontainerElement={<div className=\"map-container\"/>}\r\n        mapElement={<div className=\"map\" role=\"application\" tabIndex={0}\r\n          aria-label=\"Map of neighborhood\"/>}\r\n        markers={markers} onToggleInfoWindow={onToggleInfoWindow}/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NeighborhoodMap;\r\n","/* global google */\r\nimport React, {Component} from 'react';\r\nimport scriptLoader from 'react-async-script-loader';\r\nimport $ from 'jquery';\r\nimport './App.css';\r\nimport ListView from './ListView';\r\nimport NeighborhoodMap from './NeighborhoodMap';\r\nimport markerData from './markers.json';\r\n\r\n// cors-anywhere bypasses the cross-origin resource sharing error\r\nconst proxy = 'https://cors-anywhere.herokuapp.com/';\r\n//const proxy = 'https://crossorigin.me/'; // Backup in case cors-anywhere is down\r\nconst api = 'Bearer 5gHT0N2H91kvYB8spnGJj0SD4Cub-O1qp35smS1pSrs0BFyGEayFl6W7AZWROPauJ2TU5gOcm2B1Otx' +\r\n  'adbNvCb0hcu_PFngOKC1f5a4QzgI5lR1gt2WeZoBa7zNeW3Yx';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // Initial markers\r\n    markers: JSON.parse(JSON.stringify(markerData)),\r\n    willLoad: true\r\n  };\r\n\r\n  componentWillReceiveProps({isScriptLoaded, isScriptLoadSucceed}) {\r\n    if (isScriptLoaded && !this.props.isScriptLoaded) {\r\n      // Perform asynchronous functions after Google Maps has loaded successfully\r\n      if (isScriptLoadSucceed) {\r\n        const markers = [...this.state.markers]; // Make a copy of markers\r\n        markers.map(marker => {\r\n          // Set common properties of all markers\r\n          marker.animation = google ? google.maps.Animation.DROP : null;\r\n          marker.showInfo = false;\r\n          marker.isVisible = true;\r\n          // Click focused marker when user hits enter\r\n          document.addEventListener('keyup', event =>\r\n            event.target.title === marker.title && event.keyCode === 13 && this.toggleInfoWindow(marker)\r\n          );\r\n          // Get image and reviews from Yelp\r\n          this.getBusiness(marker).done(data => {\r\n            marker.id = data.businesses[0].id;\r\n            marker.url = data.businesses[0].url;\r\n            marker.image = data.businesses[0].image_url;\r\n            this.getReviews(marker.id).done(data => {\r\n              marker.reviews = [];\r\n              for (const review of data.reviews) {\r\n                marker.reviews.push({\r\n                  id: review.id,\r\n                  rating: review.rating,\r\n                  text: review.text\r\n                });\r\n              }\r\n            }).fail((xhr, textStatus, error) => console.error(`Error: ${error}`));\r\n          }).fail((xhr, textStatus, error) => console.error(`Error: ${error}`));\r\n\r\n          return marker;\r\n        });\r\n\r\n        this.setState({markers}); // Set markers to the clone created above\r\n      } else\r\n        this.setState({willLoad: false});\r\n    }\r\n  }\r\n\r\n  getBusiness = marker =>\r\n    $.ajax({\r\n      // Marker title matches title on Yelp for better search results\r\n      url: proxy + `https://api.yelp.com/v3/businesses/search?latitude=${marker.position.lat}` +\r\n        `&longitude=${marker.position.lng}&term=${marker.title}`,\r\n      headers: {\r\n        Authorization: api\r\n      }\r\n    });\r\n\r\n  getReviews = id =>\r\n    $.ajax({\r\n      url: proxy + `https://api.yelp.com/v3/businesses/${id}/reviews`,\r\n      headers: {\r\n        Authorization: api\r\n      }\r\n    });\r\n\r\n  // Control marker behavior and info window when clicked\r\n  toggleInfoWindow = marker => {\r\n    const markers = [...this.state.markers];\r\n    marker = markers.filter(m => m.id === marker.id)[0];\r\n    marker.showInfo = !marker.showInfo;\r\n    marker.animation = marker.showInfo && google ? google.maps.Animation.BOUNCE : null;\r\n    this.setState({markers});\r\n  };\r\n\r\n  // Filter markers based on search query\r\n  filterLocations = (event, query) => {\r\n    event.preventDefault();\r\n    const markers = [...this.state.markers];\r\n    markers.map(marker => {\r\n      // Marker drops if it becomes visible\r\n      if (!marker.isVisible && google)\r\n        marker.animation = google.maps.Animation.DROP; // Take a chance to drop before filtering\r\n      // Case-insensitive filter\r\n      marker.isVisible = marker.title.toLowerCase().includes(query.toLowerCase());\r\n      if (!marker.isVisible) {\r\n        marker.showInfo = false; // Don't show info window if marker is invisible\r\n        marker.animation = null; // Filter unsuccessful, remain null\r\n      }\r\n      return marker;\r\n    });\r\n\r\n    this.setState({markers});\r\n  };\r\n\r\n  render() {\r\n    const {isScriptLoadSucceed} = this.props; // Checks whether Google Maps has loaded\r\n    const {markers, willLoad} = this.state;\r\n    // Apply focus to all markers\r\n    const mapElements = [...document.querySelectorAll('.gmnoprint')].slice(0, markers.length);\r\n    mapElements.map(element => element.tabIndex = 0);\r\n\r\n    // Placeholder when map doesn't appear\r\n    const placeholder = willLoad ? (\r\n      <p className=\"loading\">Loading...</p>\r\n    ) : (\r\n      <h1 className=\"error-message google\" tabIndex={0}>Error! Google Maps was unable to load.</h1>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <ListView markers={markers} onToggleInfoWindow={this.toggleInfoWindow}\r\n          onFilterLocations={this.filterLocations}/>\r\n        {isScriptLoadSucceed ? (\r\n          <NeighborhoodMap markers={markers} onToggleInfoWindow={this.toggleInfoWindow}/>\r\n        ) : (\r\n          placeholder\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default scriptLoader(\r\n  'https://maps.googleapis.com/maps/api/js?key=AIzaSyAgW5OHRMNIfawf6DfY_UpnK1MqtJyN87E&v=3'\r\n)(App);\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}